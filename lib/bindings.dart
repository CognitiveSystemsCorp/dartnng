// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Nanomsg NG bindings
class nng {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  nng(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  nng.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void nng_fini() {
    return _nng_fini();
  }

  late final _nng_finiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('nng_fini');
  late final _nng_fini = _nng_finiPtr.asFunction<void Function()>();

  int nng_close(
    nng_socket arg0,
  ) {
    return _nng_close(
      arg0,
    );
  }

  late final _nng_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_socket)>>('nng_close');
  late final _nng_close = _nng_closePtr.asFunction<int Function(nng_socket)>();

  int nng_close_ptr(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_close_ptr(
      arg0,
    );
  }

  late final _nng_close_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_close_ptr');
  late final _nng_close_ptr =
      _nng_close_ptrPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_socket_id(
    nng_socket arg0,
  ) {
    return _nng_socket_id(
      arg0,
    );
  }

  late final _nng_socket_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_socket)>>(
          'nng_socket_id');
  late final _nng_socket_id =
      _nng_socket_idPtr.asFunction<int Function(nng_socket)>();

  int nng_socket_set(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_socket_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_socket_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_socket_set');
  late final _nng_socket_set = _nng_socket_setPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_socket_set_bool(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_socket_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_socket_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_socket_set_bool');
  late final _nng_socket_set_bool = _nng_socket_set_boolPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_socket_set_int(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_socket_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_socket_set_int');
  late final _nng_socket_set_int = _nng_socket_set_intPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_socket_set_size(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_socket_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_socket_set_size');
  late final _nng_socket_set_size = _nng_socket_set_sizePtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_socket_set_uint64(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_socket_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_socket_set_uint64');
  late final _nng_socket_set_uint64 = _nng_socket_set_uint64Ptr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_socket_set_string(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_socket_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_socket_set_string');
  late final _nng_socket_set_string = _nng_socket_set_stringPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_socket_set_ptr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_socket_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_socket_set_ptr');
  late final _nng_socket_set_ptr = _nng_socket_set_ptrPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_socket_set_ms(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_socket_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_socket_set_ms');
  late final _nng_socket_set_ms = _nng_socket_set_msPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_socket_set_addr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_socket_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_socket_set_addr');
  late final _nng_socket_set_addr = _nng_socket_set_addrPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_socket_get(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_socket_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_socket_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_socket_get');
  late final _nng_socket_get = _nng_socket_getPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_socket_get_bool(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_socket_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_socket_get_bool');
  late final _nng_socket_get_bool = _nng_socket_get_boolPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_socket_get_int(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_socket_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_socket_get_int');
  late final _nng_socket_get_int = _nng_socket_get_intPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_socket_get_size(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_socket_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_socket_get_size');
  late final _nng_socket_get_size = _nng_socket_get_sizePtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_socket_get_uint64(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_socket_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_socket_get_uint64');
  late final _nng_socket_get_uint64 = _nng_socket_get_uint64Ptr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_socket_get_string(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_socket_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_socket_get_string');
  late final _nng_socket_get_string = _nng_socket_get_stringPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_socket_get_ptr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_socket_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_socket_get_ptr');
  late final _nng_socket_get_ptr = _nng_socket_get_ptrPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_socket_get_ms(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_socket_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_socket_get_ms');
  late final _nng_socket_get_ms = _nng_socket_get_msPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_socket_get_addr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_socket_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_socket_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_socket_get_addr');
  late final _nng_socket_get_addr = _nng_socket_get_addrPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_pipe_notify(
    nng_socket arg0,
    int arg1,
    nng_pipe_cb arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _nng_pipe_notify(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_pipe_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Int32, nng_pipe_cb,
              ffi.Pointer<ffi.Void>)>>('nng_pipe_notify');
  late final _nng_pipe_notify = _nng_pipe_notifyPtr.asFunction<
      int Function(nng_socket, int, nng_pipe_cb, ffi.Pointer<ffi.Void>)>();

  int nng_listen(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_listener> arg2,
    int arg3,
  ) {
    return _nng_listen(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_listener>, ffi.Int)>>('nng_listen');
  late final _nng_listen = _nng_listenPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_listener>, int)>();

  int nng_dial(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_dialer> arg2,
    int arg3,
  ) {
    return _nng_dial(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_dialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_dialer>, ffi.Int)>>('nng_dial');
  late final _nng_dial = _nng_dialPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_dialer>, int)>();

  int nng_dialer_create(
    ffi.Pointer<nng_dialer> arg0,
    nng_socket arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_dialer_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_dialer>, nng_socket,
              ffi.Pointer<ffi.Char>)>>('nng_dialer_create');
  late final _nng_dialer_create = _nng_dialer_createPtr.asFunction<
      int Function(
          ffi.Pointer<nng_dialer>, nng_socket, ffi.Pointer<ffi.Char>)>();

  int nng_listener_create(
    ffi.Pointer<nng_listener> arg0,
    nng_socket arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_listener_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_listener>, nng_socket,
              ffi.Pointer<ffi.Char>)>>('nng_listener_create');
  late final _nng_listener_create = _nng_listener_createPtr.asFunction<
      int Function(
          ffi.Pointer<nng_listener>, nng_socket, ffi.Pointer<ffi.Char>)>();

  int nng_dialer_start(
    nng_dialer arg0,
    int arg1,
  ) {
    return _nng_dialer_start(
      arg0,
      arg1,
    );
  }

  late final _nng_dialer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_dialer, ffi.Int)>>(
          'nng_dialer_start');
  late final _nng_dialer_start =
      _nng_dialer_startPtr.asFunction<int Function(nng_dialer, int)>();

  int nng_listener_start(
    nng_listener arg0,
    int arg1,
  ) {
    return _nng_listener_start(
      arg0,
      arg1,
    );
  }

  late final _nng_listener_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_listener, ffi.Int)>>(
          'nng_listener_start');
  late final _nng_listener_start =
      _nng_listener_startPtr.asFunction<int Function(nng_listener, int)>();

  int nng_dialer_close(
    nng_dialer arg0,
  ) {
    return _nng_dialer_close(
      arg0,
    );
  }

  late final _nng_dialer_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_dialer)>>(
          'nng_dialer_close');
  late final _nng_dialer_close =
      _nng_dialer_closePtr.asFunction<int Function(nng_dialer)>();

  int nng_listener_close(
    nng_listener arg0,
  ) {
    return _nng_listener_close(
      arg0,
    );
  }

  late final _nng_listener_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_listener)>>(
          'nng_listener_close');
  late final _nng_listener_close =
      _nng_listener_closePtr.asFunction<int Function(nng_listener)>();

  int nng_dialer_id(
    nng_dialer arg0,
  ) {
    return _nng_dialer_id(
      arg0,
    );
  }

  late final _nng_dialer_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_dialer)>>(
          'nng_dialer_id');
  late final _nng_dialer_id =
      _nng_dialer_idPtr.asFunction<int Function(nng_dialer)>();

  int nng_listener_id(
    nng_listener arg0,
  ) {
    return _nng_listener_id(
      arg0,
    );
  }

  late final _nng_listener_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_listener)>>(
          'nng_listener_id');
  late final _nng_listener_id =
      _nng_listener_idPtr.asFunction<int Function(nng_listener)>();

  int nng_dialer_set(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_dialer_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_dialer_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_dialer_set');
  late final _nng_dialer_set = _nng_dialer_setPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_dialer_set_bool(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_dialer_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_dialer_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_dialer_set_bool');
  late final _nng_dialer_set_bool = _nng_dialer_set_boolPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_set_int(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_dialer_set_int');
  late final _nng_dialer_set_int = _nng_dialer_set_intPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_set_size(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_dialer_set_size');
  late final _nng_dialer_set_size = _nng_dialer_set_sizePtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_set_uint64(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_dialer_set_uint64');
  late final _nng_dialer_set_uint64 = _nng_dialer_set_uint64Ptr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_set_string(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_dialer_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_dialer_set_string');
  late final _nng_dialer_set_string = _nng_dialer_set_stringPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_dialer_set_ptr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_dialer_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_dialer_set_ptr');
  late final _nng_dialer_set_ptr = _nng_dialer_set_ptrPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_dialer_set_ms(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_dialer_set_ms');
  late final _nng_dialer_set_ms = _nng_dialer_set_msPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_set_addr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_dialer_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_dialer_set_addr');
  late final _nng_dialer_set_addr = _nng_dialer_set_addrPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_dialer_get(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_dialer_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_dialer_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_dialer_get');
  late final _nng_dialer_get = _nng_dialer_getPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_dialer_get_bool(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_dialer_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_dialer_get_bool');
  late final _nng_dialer_get_bool = _nng_dialer_get_boolPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_dialer_get_int(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_dialer_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_dialer_get_int');
  late final _nng_dialer_get_int = _nng_dialer_get_intPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_dialer_get_size(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_dialer_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_dialer_get_size');
  late final _nng_dialer_get_size = _nng_dialer_get_sizePtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_dialer_get_uint64(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_dialer_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_dialer_get_uint64');
  late final _nng_dialer_get_uint64 = _nng_dialer_get_uint64Ptr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_dialer_get_string(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_dialer_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_dialer_get_string');
  late final _nng_dialer_get_string = _nng_dialer_get_stringPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_dialer_get_ptr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_dialer_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_dialer_get_ptr');
  late final _nng_dialer_get_ptr = _nng_dialer_get_ptrPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_dialer_get_ms(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_dialer_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_dialer_get_ms');
  late final _nng_dialer_get_ms = _nng_dialer_get_msPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_dialer_get_addr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_dialer_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_dialer_get_addr');
  late final _nng_dialer_get_addr = _nng_dialer_get_addrPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_listener_set(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_listener_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_listener_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_listener_set');
  late final _nng_listener_set = _nng_listener_setPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_listener_set_bool(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_listener_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_listener_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_listener_set_bool');
  late final _nng_listener_set_bool = _nng_listener_set_boolPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_set_int(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_listener_set_int');
  late final _nng_listener_set_int = _nng_listener_set_intPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_set_size(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_listener_set_size');
  late final _nng_listener_set_size = _nng_listener_set_sizePtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_set_uint64(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_listener_set_uint64');
  late final _nng_listener_set_uint64 = _nng_listener_set_uint64Ptr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_set_string(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_listener_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_listener_set_string');
  late final _nng_listener_set_string = _nng_listener_set_stringPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_listener_set_ptr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_listener_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_listener_set_ptr');
  late final _nng_listener_set_ptr = _nng_listener_set_ptrPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_listener_set_ms(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_listener_set_ms');
  late final _nng_listener_set_ms = _nng_listener_set_msPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_set_addr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_listener_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_listener_set_addr');
  late final _nng_listener_set_addr = _nng_listener_set_addrPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_listener_get(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_listener_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_listener_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_listener,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_listener_get');
  late final _nng_listener_get = _nng_listener_getPtr.asFunction<
      int Function(nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_listener_get_bool(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_listener_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_listener_get_bool');
  late final _nng_listener_get_bool = _nng_listener_get_boolPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_listener_get_int(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_listener_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_listener_get_int');
  late final _nng_listener_get_int = _nng_listener_get_intPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_listener_get_size(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_listener_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_listener_get_size');
  late final _nng_listener_get_size = _nng_listener_get_sizePtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_listener_get_uint64(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_listener_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_listener_get_uint64');
  late final _nng_listener_get_uint64 = _nng_listener_get_uint64Ptr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_listener_get_string(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_listener_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_listener_get_string');
  late final _nng_listener_get_string = _nng_listener_get_stringPtr.asFunction<
      int Function(nng_listener, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_listener_get_ptr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_listener_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_listener_get_ptr');
  late final _nng_listener_get_ptr = _nng_listener_get_ptrPtr.asFunction<
      int Function(nng_listener, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_listener_get_ms(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_listener_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_listener_get_ms');
  late final _nng_listener_get_ms = _nng_listener_get_msPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_listener_get_addr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_listener_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_listener_get_addr');
  late final _nng_listener_get_addr = _nng_listener_get_addrPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  ffi.Pointer<ffi.Char> nng_strerror(
    int arg0,
  ) {
    return _nng_strerror(
      arg0,
    );
  }

  late final _nng_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'nng_strerror');
  late final _nng_strerror =
      _nng_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int nng_send(
    nng_socket arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _nng_send(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Int)>>('nng_send');
  late final _nng_send = _nng_sendPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Void>, int, int)>();

  int nng_recv(
    nng_socket arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Size> arg2,
    int arg3,
  ) {
    return _nng_recv(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>, ffi.Int)>>('nng_recv');
  late final _nng_recv = _nng_recvPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>, int)>();

  int nng_sendmsg(
    nng_socket arg0,
    ffi.Pointer<nng_msg> arg1,
    int arg2,
  ) {
    return _nng_sendmsg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_socket, ffi.Pointer<nng_msg>, ffi.Int)>>('nng_sendmsg');
  late final _nng_sendmsg = _nng_sendmsgPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<nng_msg>, int)>();

  int nng_recvmsg(
    nng_socket arg0,
    ffi.Pointer<ffi.Pointer<nng_msg>> arg1,
    int arg2,
  ) {
    return _nng_recvmsg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Pointer<nng_msg>>,
              ffi.Int)>>('nng_recvmsg');
  late final _nng_recvmsg = _nng_recvmsgPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Pointer<nng_msg>>, int)>();

  void nng_send_aio(
    nng_socket arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_send_aio(
      arg0,
      arg1,
    );
  }

  late final _nng_send_aioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(nng_socket, ffi.Pointer<nng_aio>)>>('nng_send_aio');
  late final _nng_send_aio = _nng_send_aioPtr
      .asFunction<void Function(nng_socket, ffi.Pointer<nng_aio>)>();

  void nng_recv_aio(
    nng_socket arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_recv_aio(
      arg0,
      arg1,
    );
  }

  late final _nng_recv_aioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(nng_socket, ffi.Pointer<nng_aio>)>>('nng_recv_aio');
  late final _nng_recv_aio = _nng_recv_aioPtr
      .asFunction<void Function(nng_socket, ffi.Pointer<nng_aio>)>();

  int nng_ctx_open(
    ffi.Pointer<nng_ctx> arg0,
    nng_socket arg1,
  ) {
    return _nng_ctx_open(
      arg0,
      arg1,
    );
  }

  late final _nng_ctx_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_ctx>, nng_socket)>>('nng_ctx_open');
  late final _nng_ctx_open = _nng_ctx_openPtr
      .asFunction<int Function(ffi.Pointer<nng_ctx>, nng_socket)>();

  int nng_ctx_close(
    nng_ctx arg0,
  ) {
    return _nng_ctx_close(
      arg0,
    );
  }

  late final _nng_ctx_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_ctx)>>('nng_ctx_close');
  late final _nng_ctx_close =
      _nng_ctx_closePtr.asFunction<int Function(nng_ctx)>();

  int nng_ctx_id(
    nng_ctx arg0,
  ) {
    return _nng_ctx_id(
      arg0,
    );
  }

  late final _nng_ctx_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_ctx)>>('nng_ctx_id');
  late final _nng_ctx_id = _nng_ctx_idPtr.asFunction<int Function(nng_ctx)>();

  void nng_ctx_recv(
    nng_ctx arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_ctx_recv(
      arg0,
      arg1,
    );
  }

  late final _nng_ctx_recvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(nng_ctx, ffi.Pointer<nng_aio>)>>(
      'nng_ctx_recv');
  late final _nng_ctx_recv = _nng_ctx_recvPtr
      .asFunction<void Function(nng_ctx, ffi.Pointer<nng_aio>)>();

  void nng_ctx_send(
    nng_ctx arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_ctx_send(
      arg0,
      arg1,
    );
  }

  late final _nng_ctx_sendPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(nng_ctx, ffi.Pointer<nng_aio>)>>(
      'nng_ctx_send');
  late final _nng_ctx_send = _nng_ctx_sendPtr
      .asFunction<void Function(nng_ctx, ffi.Pointer<nng_aio>)>();

  int nng_ctx_get(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_ctx_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_ctx_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_ctx_get');
  late final _nng_ctx_get = _nng_ctx_getPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_ctx_get_bool(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_ctx_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_ctx_get_bool');
  late final _nng_ctx_get_bool = _nng_ctx_get_boolPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_ctx_get_int(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_ctx_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_ctx_get_int');
  late final _nng_ctx_get_int = _nng_ctx_get_intPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_ctx_get_size(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_ctx_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_ctx_get_size');
  late final _nng_ctx_get_size = _nng_ctx_get_sizePtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_ctx_get_uint64(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_ctx_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_ctx_get_uint64');
  late final _nng_ctx_get_uint64 = _nng_ctx_get_uint64Ptr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_ctx_get_string(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_ctx_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_ctx_get_string');
  late final _nng_ctx_get_string = _nng_ctx_get_stringPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_ctx_get_ptr(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_ctx_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_ctx_get_ptr');
  late final _nng_ctx_get_ptr = _nng_ctx_get_ptrPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_ctx_get_ms(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_ctx_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_ctx_get_ms');
  late final _nng_ctx_get_ms = _nng_ctx_get_msPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_ctx_get_addr(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_ctx_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_ctx_get_addr');
  late final _nng_ctx_get_addr = _nng_ctx_get_addrPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_ctx_set(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_ctx_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_ctx_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_ctx_set');
  late final _nng_ctx_set = _nng_ctx_setPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_ctx_set_bool(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_ctx_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_ctx_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_ctx, ffi.Pointer<ffi.Char>, ffi.Uint8)>>('nng_ctx_set_bool');
  late final _nng_ctx_set_bool = _nng_ctx_set_boolPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_set_int(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_ctx, ffi.Pointer<ffi.Char>, ffi.Int)>>('nng_ctx_set_int');
  late final _nng_ctx_set_int = _nng_ctx_set_intPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_set_size(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_ctx, ffi.Pointer<ffi.Char>, ffi.Size)>>('nng_ctx_set_size');
  late final _nng_ctx_set_size = _nng_ctx_set_sizePtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_set_uint64(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_ctx_set_uint64');
  late final _nng_ctx_set_uint64 = _nng_ctx_set_uint64Ptr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_set_string(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_ctx_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_ctx_set_string');
  late final _nng_ctx_set_string = _nng_ctx_set_stringPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_ctx_set_ptr(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_ctx_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_ctx_set_ptr');
  late final _nng_ctx_set_ptr = _nng_ctx_set_ptrPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_ctx_set_ms(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_ctx, ffi.Pointer<ffi.Char>, nng_duration)>>('nng_ctx_set_ms');
  late final _nng_ctx_set_ms = _nng_ctx_set_msPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_set_addr(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_ctx_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_ctx_set_addr');
  late final _nng_ctx_set_addr = _nng_ctx_set_addrPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  ffi.Pointer<ffi.Void> nng_alloc(
    int arg0,
  ) {
    return _nng_alloc(
      arg0,
    );
  }

  late final _nng_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'nng_alloc');
  late final _nng_alloc =
      _nng_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void nng_free(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _nng_free(
      arg0,
      arg1,
    );
  }

  late final _nng_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_free');
  late final _nng_free =
      _nng_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> nng_strdup(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nng_strdup(
      arg0,
    );
  }

  late final _nng_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('nng_strdup');
  late final _nng_strdup = _nng_strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void nng_strfree(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nng_strfree(
      arg0,
    );
  }

  late final _nng_strfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'nng_strfree');
  late final _nng_strfree =
      _nng_strfreePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int nng_aio_alloc(
    ffi.Pointer<ffi.Pointer<nng_aio>> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_aio_alloc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_aio_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<nng_aio>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('nng_aio_alloc');
  late final _nng_aio_alloc = _nng_aio_allocPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<nng_aio>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void nng_aio_free(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_free(
      arg0,
    );
  }

  late final _nng_aio_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_free');
  late final _nng_aio_free =
      _nng_aio_freePtr.asFunction<void Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_reap(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_reap(
      arg0,
    );
  }

  late final _nng_aio_reapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_reap');
  late final _nng_aio_reap =
      _nng_aio_reapPtr.asFunction<void Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_stop(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_stop(
      arg0,
    );
  }

  late final _nng_aio_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_stop');
  late final _nng_aio_stop =
      _nng_aio_stopPtr.asFunction<void Function(ffi.Pointer<nng_aio>)>();

  int nng_aio_result(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_result(
      arg0,
    );
  }

  late final _nng_aio_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_result');
  late final _nng_aio_result =
      _nng_aio_resultPtr.asFunction<int Function(ffi.Pointer<nng_aio>)>();

  int nng_aio_count(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_count(
      arg0,
    );
  }

  late final _nng_aio_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_count');
  late final _nng_aio_count =
      _nng_aio_countPtr.asFunction<int Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_cancel(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_cancel(
      arg0,
    );
  }

  late final _nng_aio_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_cancel');
  late final _nng_aio_cancel =
      _nng_aio_cancelPtr.asFunction<void Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_abort(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
  ) {
    return _nng_aio_abort(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_abortPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>, ffi.Int)>>(
      'nng_aio_abort');
  late final _nng_aio_abort =
      _nng_aio_abortPtr.asFunction<void Function(ffi.Pointer<nng_aio>, int)>();

  void nng_aio_wait(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_wait(
      arg0,
    );
  }

  late final _nng_aio_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_wait');
  late final _nng_aio_wait =
      _nng_aio_waitPtr.asFunction<void Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_set_msg(
    ffi.Pointer<nng_aio> arg0,
    ffi.Pointer<nng_msg> arg1,
  ) {
    return _nng_aio_set_msg(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_set_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_aio>, ffi.Pointer<nng_msg>)>>('nng_aio_set_msg');
  late final _nng_aio_set_msg = _nng_aio_set_msgPtr
      .asFunction<void Function(ffi.Pointer<nng_aio>, ffi.Pointer<nng_msg>)>();

  ffi.Pointer<nng_msg> nng_aio_get_msg(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_get_msg(
      arg0,
    );
  }

  late final _nng_aio_get_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_msg> Function(
              ffi.Pointer<nng_aio>)>>('nng_aio_get_msg');
  late final _nng_aio_get_msg = _nng_aio_get_msgPtr
      .asFunction<ffi.Pointer<nng_msg> Function(ffi.Pointer<nng_aio>)>();

  int nng_aio_set_input(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_aio_set_input(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_aio_set_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_aio>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('nng_aio_set_input');
  late final _nng_aio_set_input = _nng_aio_set_inputPtr.asFunction<
      int Function(ffi.Pointer<nng_aio>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> nng_aio_get_input(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
  ) {
    return _nng_aio_get_input(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_get_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nng_aio>, ffi.UnsignedInt)>>('nng_aio_get_input');
  late final _nng_aio_get_input = _nng_aio_get_inputPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nng_aio>, int)>();

  int nng_aio_set_output(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_aio_set_output(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_aio_set_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_aio>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('nng_aio_set_output');
  late final _nng_aio_set_output = _nng_aio_set_outputPtr.asFunction<
      int Function(ffi.Pointer<nng_aio>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> nng_aio_get_output(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
  ) {
    return _nng_aio_get_output(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_get_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nng_aio>, ffi.UnsignedInt)>>('nng_aio_get_output');
  late final _nng_aio_get_output = _nng_aio_get_outputPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nng_aio>, int)>();

  void nng_aio_set_timeout(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
  ) {
    return _nng_aio_set_timeout(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_set_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_aio>, nng_duration)>>('nng_aio_set_timeout');
  late final _nng_aio_set_timeout = _nng_aio_set_timeoutPtr
      .asFunction<void Function(ffi.Pointer<nng_aio>, int)>();

  int nng_aio_set_iov(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
    ffi.Pointer<nng_iov> arg2,
  ) {
    return _nng_aio_set_iov(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_aio_set_iovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_aio>, ffi.UnsignedInt,
              ffi.Pointer<nng_iov>)>>('nng_aio_set_iov');
  late final _nng_aio_set_iov = _nng_aio_set_iovPtr.asFunction<
      int Function(ffi.Pointer<nng_aio>, int, ffi.Pointer<nng_iov>)>();

  bool nng_aio_begin(
    ffi.Pointer<nng_aio> arg0,
  ) {
    return _nng_aio_begin(
          arg0,
        ) !=
        0;
  }

  late final _nng_aio_beginPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<nng_aio>)>>(
          'nng_aio_begin');
  late final _nng_aio_begin =
      _nng_aio_beginPtr.asFunction<int Function(ffi.Pointer<nng_aio>)>();

  void nng_aio_finish(
    ffi.Pointer<nng_aio> arg0,
    int arg1,
  ) {
    return _nng_aio_finish(
      arg0,
      arg1,
    );
  }

  late final _nng_aio_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_aio>, ffi.Int)>>(
      'nng_aio_finish');
  late final _nng_aio_finish =
      _nng_aio_finishPtr.asFunction<void Function(ffi.Pointer<nng_aio>, int)>();

  void nng_aio_defer(
    ffi.Pointer<nng_aio> arg0,
    nng_aio_cancelfn arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_aio_defer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_aio_deferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nng_aio>, nng_aio_cancelfn,
              ffi.Pointer<ffi.Void>)>>('nng_aio_defer');
  late final _nng_aio_defer = _nng_aio_deferPtr.asFunction<
      void Function(
          ffi.Pointer<nng_aio>, nng_aio_cancelfn, ffi.Pointer<ffi.Void>)>();

  void nng_sleep_aio(
    int arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_sleep_aio(
      arg0,
      arg1,
    );
  }

  late final _nng_sleep_aioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              nng_duration, ffi.Pointer<nng_aio>)>>('nng_sleep_aio');
  late final _nng_sleep_aio =
      _nng_sleep_aioPtr.asFunction<void Function(int, ffi.Pointer<nng_aio>)>();

  int nng_msg_alloc(
    ffi.Pointer<ffi.Pointer<nng_msg>> arg0,
    int arg1,
  ) {
    return _nng_msg_alloc(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<nng_msg>>, ffi.Size)>>('nng_msg_alloc');
  late final _nng_msg_alloc = _nng_msg_allocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<nng_msg>>, int)>();

  void nng_msg_free(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_free(
      arg0,
    );
  }

  late final _nng_msg_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_free');
  late final _nng_msg_free =
      _nng_msg_freePtr.asFunction<void Function(ffi.Pointer<nng_msg>)>();

  int nng_msg_realloc(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_realloc(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_reallocPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_realloc');
  late final _nng_msg_realloc =
      _nng_msg_reallocPtr.asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_reserve(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_reserve(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_reservePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_reserve');
  late final _nng_msg_reserve =
      _nng_msg_reservePtr.asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_capacity(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_capacity(
      arg0,
    );
  }

  late final _nng_msg_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_capacity');
  late final _nng_msg_capacity =
      _nng_msg_capacityPtr.asFunction<int Function(ffi.Pointer<nng_msg>)>();

  ffi.Pointer<ffi.Void> nng_msg_header(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_header(
      arg0,
    );
  }

  late final _nng_msg_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nng_msg>)>>('nng_msg_header');
  late final _nng_msg_header = _nng_msg_headerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nng_msg>)>();

  int nng_msg_header_len(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_header_len(
      arg0,
    );
  }

  late final _nng_msg_header_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_header_len');
  late final _nng_msg_header_len =
      _nng_msg_header_lenPtr.asFunction<int Function(ffi.Pointer<nng_msg>)>();

  ffi.Pointer<ffi.Void> nng_msg_body(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_body(
      arg0,
    );
  }

  late final _nng_msg_bodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nng_msg>)>>('nng_msg_body');
  late final _nng_msg_body = _nng_msg_bodyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nng_msg>)>();

  int nng_msg_len(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_len(
      arg0,
    );
  }

  late final _nng_msg_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_len');
  late final _nng_msg_len =
      _nng_msg_lenPtr.asFunction<int Function(ffi.Pointer<nng_msg>)>();

  int nng_msg_append(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _nng_msg_append(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_msg_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_msg_append');
  late final _nng_msg_append = _nng_msg_appendPtr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>, int)>();

  int nng_msg_insert(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _nng_msg_insert(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_msg_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_msg_insert');
  late final _nng_msg_insert = _nng_msg_insertPtr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>, int)>();

  int nng_msg_trim(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_trim(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_trimPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_trim');
  late final _nng_msg_trim =
      _nng_msg_trimPtr.asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_chop(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_chop(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_chopPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_chop');
  late final _nng_msg_chop =
      _nng_msg_chopPtr.asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_append(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _nng_msg_header_append(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_msg_header_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_msg_header_append');
  late final _nng_msg_header_append = _nng_msg_header_appendPtr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>, int)>();

  int nng_msg_header_insert(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _nng_msg_header_insert(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_msg_header_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_msg_header_insert');
  late final _nng_msg_header_insert = _nng_msg_header_insertPtr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Void>, int)>();

  int nng_msg_header_trim(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_trim(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_trimPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_header_trim');
  late final _nng_msg_header_trim = _nng_msg_header_trimPtr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_chop(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_chop(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_chopPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Size)>>(
      'nng_msg_header_chop');
  late final _nng_msg_header_chop = _nng_msg_header_chopPtr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_append_u16(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_append_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_append_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint16)>>('nng_msg_header_append_u16');
  late final _nng_msg_header_append_u16 = _nng_msg_header_append_u16Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_append_u32(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_append_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_append_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint32)>>('nng_msg_header_append_u32');
  late final _nng_msg_header_append_u32 = _nng_msg_header_append_u32Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_append_u64(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_append_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_append_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint64)>>('nng_msg_header_append_u64');
  late final _nng_msg_header_append_u64 = _nng_msg_header_append_u64Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_insert_u16(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_insert_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_insert_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint16)>>('nng_msg_header_insert_u16');
  late final _nng_msg_header_insert_u16 = _nng_msg_header_insert_u16Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_insert_u32(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_insert_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_insert_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint32)>>('nng_msg_header_insert_u32');
  late final _nng_msg_header_insert_u32 = _nng_msg_header_insert_u32Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_insert_u64(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_header_insert_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_insert_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint64)>>('nng_msg_header_insert_u64');
  late final _nng_msg_header_insert_u64 = _nng_msg_header_insert_u64Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_header_chop_u16(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return _nng_msg_header_chop_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_chop_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint16>)>>('nng_msg_header_chop_u16');
  late final _nng_msg_header_chop_u16 = _nng_msg_header_chop_u16Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint16>)>();

  int nng_msg_header_chop_u32(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _nng_msg_header_chop_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_chop_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint32>)>>('nng_msg_header_chop_u32');
  late final _nng_msg_header_chop_u32 = _nng_msg_header_chop_u32Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint32>)>();

  int nng_msg_header_chop_u64(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return _nng_msg_header_chop_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_chop_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint64>)>>('nng_msg_header_chop_u64');
  late final _nng_msg_header_chop_u64 = _nng_msg_header_chop_u64Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint64>)>();

  int nng_msg_header_trim_u16(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return _nng_msg_header_trim_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_trim_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint16>)>>('nng_msg_header_trim_u16');
  late final _nng_msg_header_trim_u16 = _nng_msg_header_trim_u16Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint16>)>();

  int nng_msg_header_trim_u32(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _nng_msg_header_trim_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_trim_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint32>)>>('nng_msg_header_trim_u32');
  late final _nng_msg_header_trim_u32 = _nng_msg_header_trim_u32Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint32>)>();

  int nng_msg_header_trim_u64(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return _nng_msg_header_trim_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_header_trim_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint64>)>>('nng_msg_header_trim_u64');
  late final _nng_msg_header_trim_u64 = _nng_msg_header_trim_u64Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint64>)>();

  int nng_msg_append_u16(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_append_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_append_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint16)>>('nng_msg_append_u16');
  late final _nng_msg_append_u16 = _nng_msg_append_u16Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_append_u32(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_append_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_append_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint32)>>('nng_msg_append_u32');
  late final _nng_msg_append_u32 = _nng_msg_append_u32Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_append_u64(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_append_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_append_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint64)>>('nng_msg_append_u64');
  late final _nng_msg_append_u64 = _nng_msg_append_u64Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_insert_u16(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_insert_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_insert_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint16)>>('nng_msg_insert_u16');
  late final _nng_msg_insert_u16 = _nng_msg_insert_u16Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_insert_u32(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_insert_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_insert_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint32)>>('nng_msg_insert_u32');
  late final _nng_msg_insert_u32 = _nng_msg_insert_u32Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_insert_u64(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
  ) {
    return _nng_msg_insert_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_insert_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_msg>, ffi.Uint64)>>('nng_msg_insert_u64');
  late final _nng_msg_insert_u64 = _nng_msg_insert_u64Ptr
      .asFunction<int Function(ffi.Pointer<nng_msg>, int)>();

  int nng_msg_chop_u16(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return _nng_msg_chop_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_chop_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint16>)>>('nng_msg_chop_u16');
  late final _nng_msg_chop_u16 = _nng_msg_chop_u16Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint16>)>();

  int nng_msg_chop_u32(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _nng_msg_chop_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_chop_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint32>)>>('nng_msg_chop_u32');
  late final _nng_msg_chop_u32 = _nng_msg_chop_u32Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint32>)>();

  int nng_msg_chop_u64(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return _nng_msg_chop_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_chop_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint64>)>>('nng_msg_chop_u64');
  late final _nng_msg_chop_u64 = _nng_msg_chop_u64Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint64>)>();

  int nng_msg_trim_u16(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return _nng_msg_trim_u16(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_trim_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint16>)>>('nng_msg_trim_u16');
  late final _nng_msg_trim_u16 = _nng_msg_trim_u16Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint16>)>();

  int nng_msg_trim_u32(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _nng_msg_trim_u32(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_trim_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint32>)>>('nng_msg_trim_u32');
  late final _nng_msg_trim_u32 = _nng_msg_trim_u32Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint32>)>();

  int nng_msg_trim_u64(
    ffi.Pointer<nng_msg> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return _nng_msg_trim_u64(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_trim_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>,
              ffi.Pointer<ffi.Uint64>)>>('nng_msg_trim_u64');
  late final _nng_msg_trim_u64 = _nng_msg_trim_u64Ptr.asFunction<
      int Function(ffi.Pointer<nng_msg>, ffi.Pointer<ffi.Uint64>)>();

  int nng_msg_dup(
    ffi.Pointer<ffi.Pointer<nng_msg>> arg0,
    ffi.Pointer<nng_msg> arg1,
  ) {
    return _nng_msg_dup(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_msg>>,
              ffi.Pointer<nng_msg>)>>('nng_msg_dup');
  late final _nng_msg_dup = _nng_msg_dupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<nng_msg>>, ffi.Pointer<nng_msg>)>();

  void nng_msg_clear(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_clear(
      arg0,
    );
  }

  late final _nng_msg_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_clear');
  late final _nng_msg_clear =
      _nng_msg_clearPtr.asFunction<void Function(ffi.Pointer<nng_msg>)>();

  void nng_msg_header_clear(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_header_clear(
      arg0,
    );
  }

  late final _nng_msg_header_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_header_clear');
  late final _nng_msg_header_clear = _nng_msg_header_clearPtr
      .asFunction<void Function(ffi.Pointer<nng_msg>)>();

  void nng_msg_set_pipe(
    ffi.Pointer<nng_msg> arg0,
    nng_pipe arg1,
  ) {
    return _nng_msg_set_pipe(
      arg0,
      arg1,
    );
  }

  late final _nng_msg_set_pipePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_msg>, nng_pipe)>>('nng_msg_set_pipe');
  late final _nng_msg_set_pipe = _nng_msg_set_pipePtr
      .asFunction<void Function(ffi.Pointer<nng_msg>, nng_pipe)>();

  nng_pipe nng_msg_get_pipe(
    ffi.Pointer<nng_msg> arg0,
  ) {
    return _nng_msg_get_pipe(
      arg0,
    );
  }

  late final _nng_msg_get_pipePtr =
      _lookup<ffi.NativeFunction<nng_pipe Function(ffi.Pointer<nng_msg>)>>(
          'nng_msg_get_pipe');
  late final _nng_msg_get_pipe = _nng_msg_get_pipePtr
      .asFunction<nng_pipe Function(ffi.Pointer<nng_msg>)>();

  int nng_pipe_get(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_pipe_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_pipe_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_pipe_get');
  late final _nng_pipe_get = _nng_pipe_getPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_pipe_get_bool(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_pipe_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_pipe_get_bool');
  late final _nng_pipe_get_bool = _nng_pipe_get_boolPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_pipe_get_int(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_pipe_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_pipe_get_int');
  late final _nng_pipe_get_int = _nng_pipe_get_intPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_pipe_get_ms(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_pipe_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_pipe_get_ms');
  late final _nng_pipe_get_ms = _nng_pipe_get_msPtr.asFunction<
      int Function(
          nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_pipe_get_size(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_pipe_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_pipe_get_size');
  late final _nng_pipe_get_size = _nng_pipe_get_sizePtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_pipe_get_uint64(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_pipe_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_pipe_get_uint64');
  late final _nng_pipe_get_uint64 = _nng_pipe_get_uint64Ptr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_pipe_get_string(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_pipe_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_pipe_get_string');
  late final _nng_pipe_get_string = _nng_pipe_get_stringPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_pipe_get_ptr(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_pipe_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_pipe_get_ptr');
  late final _nng_pipe_get_ptr = _nng_pipe_get_ptrPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_pipe_get_addr(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_pipe_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_pipe_get_addr');
  late final _nng_pipe_get_addr = _nng_pipe_get_addrPtr.asFunction<
      int Function(
          nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_pipe_close(
    nng_pipe arg0,
  ) {
    return _nng_pipe_close(
      arg0,
    );
  }

  late final _nng_pipe_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_pipe)>>('nng_pipe_close');
  late final _nng_pipe_close =
      _nng_pipe_closePtr.asFunction<int Function(nng_pipe)>();

  int nng_pipe_id(
    nng_pipe arg0,
  ) {
    return _nng_pipe_id(
      arg0,
    );
  }

  late final _nng_pipe_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_pipe)>>('nng_pipe_id');
  late final _nng_pipe_id =
      _nng_pipe_idPtr.asFunction<int Function(nng_pipe)>();

  nng_socket nng_pipe_socket(
    nng_pipe arg0,
  ) {
    return _nng_pipe_socket(
      arg0,
    );
  }

  late final _nng_pipe_socketPtr =
      _lookup<ffi.NativeFunction<nng_socket Function(nng_pipe)>>(
          'nng_pipe_socket');
  late final _nng_pipe_socket =
      _nng_pipe_socketPtr.asFunction<nng_socket Function(nng_pipe)>();

  nng_dialer nng_pipe_dialer(
    nng_pipe arg0,
  ) {
    return _nng_pipe_dialer(
      arg0,
    );
  }

  late final _nng_pipe_dialerPtr =
      _lookup<ffi.NativeFunction<nng_dialer Function(nng_pipe)>>(
          'nng_pipe_dialer');
  late final _nng_pipe_dialer =
      _nng_pipe_dialerPtr.asFunction<nng_dialer Function(nng_pipe)>();

  nng_listener nng_pipe_listener(
    nng_pipe arg0,
  ) {
    return _nng_pipe_listener(
      arg0,
    );
  }

  late final _nng_pipe_listenerPtr =
      _lookup<ffi.NativeFunction<nng_listener Function(nng_pipe)>>(
          'nng_pipe_listener');
  late final _nng_pipe_listener =
      _nng_pipe_listenerPtr.asFunction<nng_listener Function(nng_pipe)>();

  int nng_stats_get(
    ffi.Pointer<ffi.Pointer<nng_stat>> arg0,
  ) {
    return _nng_stats_get(
      arg0,
    );
  }

  late final _nng_stats_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<nng_stat>>)>>('nng_stats_get');
  late final _nng_stats_get = _nng_stats_getPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<nng_stat>>)>();

  void nng_stats_free(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stats_free(
      arg0,
    );
  }

  late final _nng_stats_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_stat>)>>(
          'nng_stats_free');
  late final _nng_stats_free =
      _nng_stats_freePtr.asFunction<void Function(ffi.Pointer<nng_stat>)>();

  void nng_stats_dump(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stats_dump(
      arg0,
    );
  }

  late final _nng_stats_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_stat>)>>(
          'nng_stats_dump');
  late final _nng_stats_dump =
      _nng_stats_dumpPtr.asFunction<void Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<nng_stat> nng_stat_next(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_next(
      arg0,
    );
  }

  late final _nng_stat_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>)>>('nng_stat_next');
  late final _nng_stat_next = _nng_stat_nextPtr
      .asFunction<ffi.Pointer<nng_stat> Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<nng_stat> nng_stat_child(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_child(
      arg0,
    );
  }

  late final _nng_stat_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>)>>('nng_stat_child');
  late final _nng_stat_child = _nng_stat_childPtr
      .asFunction<ffi.Pointer<nng_stat> Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<ffi.Char> nng_stat_name(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_name(
      arg0,
    );
  }

  late final _nng_stat_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nng_stat>)>>('nng_stat_name');
  late final _nng_stat_name = _nng_stat_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nng_stat>)>();

  int nng_stat_type(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_type(
      arg0,
    );
  }

  late final _nng_stat_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_stat>)>>(
          'nng_stat_type');
  late final _nng_stat_type =
      _nng_stat_typePtr.asFunction<int Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<nng_stat> nng_stat_find(
    ffi.Pointer<nng_stat> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _nng_stat_find(
      arg0,
      arg1,
    );
  }

  late final _nng_stat_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>, ffi.Pointer<ffi.Char>)>>('nng_stat_find');
  late final _nng_stat_find = _nng_stat_findPtr.asFunction<
      ffi.Pointer<nng_stat> Function(
          ffi.Pointer<nng_stat>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<nng_stat> nng_stat_find_socket(
    ffi.Pointer<nng_stat> arg0,
    nng_socket arg1,
  ) {
    return _nng_stat_find_socket(
      arg0,
      arg1,
    );
  }

  late final _nng_stat_find_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>, nng_socket)>>('nng_stat_find_socket');
  late final _nng_stat_find_socket = _nng_stat_find_socketPtr.asFunction<
      ffi.Pointer<nng_stat> Function(ffi.Pointer<nng_stat>, nng_socket)>();

  ffi.Pointer<nng_stat> nng_stat_find_dialer(
    ffi.Pointer<nng_stat> arg0,
    nng_dialer arg1,
  ) {
    return _nng_stat_find_dialer(
      arg0,
      arg1,
    );
  }

  late final _nng_stat_find_dialerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>, nng_dialer)>>('nng_stat_find_dialer');
  late final _nng_stat_find_dialer = _nng_stat_find_dialerPtr.asFunction<
      ffi.Pointer<nng_stat> Function(ffi.Pointer<nng_stat>, nng_dialer)>();

  ffi.Pointer<nng_stat> nng_stat_find_listener(
    ffi.Pointer<nng_stat> arg0,
    nng_listener arg1,
  ) {
    return _nng_stat_find_listener(
      arg0,
      arg1,
    );
  }

  late final _nng_stat_find_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nng_stat> Function(
              ffi.Pointer<nng_stat>, nng_listener)>>('nng_stat_find_listener');
  late final _nng_stat_find_listener = _nng_stat_find_listenerPtr.asFunction<
      ffi.Pointer<nng_stat> Function(ffi.Pointer<nng_stat>, nng_listener)>();

  int nng_stat_unit(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_unit(
      arg0,
    );
  }

  late final _nng_stat_unitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_stat>)>>(
          'nng_stat_unit');
  late final _nng_stat_unit =
      _nng_stat_unitPtr.asFunction<int Function(ffi.Pointer<nng_stat>)>();

  int nng_stat_value(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_value(
      arg0,
    );
  }

  late final _nng_stat_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nng_stat>)>>(
          'nng_stat_value');
  late final _nng_stat_value =
      _nng_stat_valuePtr.asFunction<int Function(ffi.Pointer<nng_stat>)>();

  bool nng_stat_bool(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_bool(
          arg0,
        ) !=
        0;
  }

  late final _nng_stat_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<nng_stat>)>>(
          'nng_stat_bool');
  late final _nng_stat_bool =
      _nng_stat_boolPtr.asFunction<int Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<ffi.Char> nng_stat_string(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_string(
      arg0,
    );
  }

  late final _nng_stat_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nng_stat>)>>('nng_stat_string');
  late final _nng_stat_string = _nng_stat_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nng_stat>)>();

  ffi.Pointer<ffi.Char> nng_stat_desc(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_desc(
      arg0,
    );
  }

  late final _nng_stat_descPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nng_stat>)>>('nng_stat_desc');
  late final _nng_stat_desc = _nng_stat_descPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nng_stat>)>();

  int nng_stat_timestamp(
    ffi.Pointer<nng_stat> arg0,
  ) {
    return _nng_stat_timestamp(
      arg0,
    );
  }

  late final _nng_stat_timestampPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nng_stat>)>>(
          'nng_stat_timestamp');
  late final _nng_stat_timestamp =
      _nng_stat_timestampPtr.asFunction<int Function(ffi.Pointer<nng_stat>)>();

  int nng_device(
    nng_socket arg0,
    nng_socket arg1,
  ) {
    return _nng_device(
      arg0,
      arg1,
    );
  }

  late final _nng_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(nng_socket, nng_socket)>>(
          'nng_device');
  late final _nng_device =
      _nng_devicePtr.asFunction<int Function(nng_socket, nng_socket)>();

  int nng_url_parse(
    ffi.Pointer<ffi.Pointer<nng_url>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _nng_url_parse(
      arg0,
      arg1,
    );
  }

  late final _nng_url_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_url>>,
              ffi.Pointer<ffi.Char>)>>('nng_url_parse');
  late final _nng_url_parse = _nng_url_parsePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<nng_url>>, ffi.Pointer<ffi.Char>)>();

  void nng_url_free(
    ffi.Pointer<nng_url> arg0,
  ) {
    return _nng_url_free(
      arg0,
    );
  }

  late final _nng_url_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_url>)>>(
          'nng_url_free');
  late final _nng_url_free =
      _nng_url_freePtr.asFunction<void Function(ffi.Pointer<nng_url>)>();

  int nng_url_clone(
    ffi.Pointer<ffi.Pointer<nng_url>> arg0,
    ffi.Pointer<nng_url> arg1,
  ) {
    return _nng_url_clone(
      arg0,
      arg1,
    );
  }

  late final _nng_url_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_url>>,
              ffi.Pointer<nng_url>)>>('nng_url_clone');
  late final _nng_url_clone = _nng_url_clonePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<nng_url>>, ffi.Pointer<nng_url>)>();

  ffi.Pointer<ffi.Char> nng_version() {
    return _nng_version();
  }

  late final _nng_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'nng_version');
  late final _nng_version =
      _nng_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void nng_stream_free(
    ffi.Pointer<nng_stream> arg0,
  ) {
    return _nng_stream_free(
      arg0,
    );
  }

  late final _nng_stream_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_stream>)>>(
          'nng_stream_free');
  late final _nng_stream_free =
      _nng_stream_freePtr.asFunction<void Function(ffi.Pointer<nng_stream>)>();

  void nng_stream_close(
    ffi.Pointer<nng_stream> arg0,
  ) {
    return _nng_stream_close(
      arg0,
    );
  }

  late final _nng_stream_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nng_stream>)>>(
          'nng_stream_close');
  late final _nng_stream_close =
      _nng_stream_closePtr.asFunction<void Function(ffi.Pointer<nng_stream>)>();

  void nng_stream_send(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_stream_send(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nng_stream>,
              ffi.Pointer<nng_aio>)>>('nng_stream_send');
  late final _nng_stream_send = _nng_stream_sendPtr.asFunction<
      void Function(ffi.Pointer<nng_stream>, ffi.Pointer<nng_aio>)>();

  void nng_stream_recv(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_stream_recv(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nng_stream>,
              ffi.Pointer<nng_aio>)>>('nng_stream_recv');
  late final _nng_stream_recv = _nng_stream_recvPtr.asFunction<
      void Function(ffi.Pointer<nng_stream>, ffi.Pointer<nng_aio>)>();

  int nng_stream_get(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_stream_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_stream_get');
  late final _nng_stream_get = _nng_stream_getPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int nng_stream_get_bool(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_stream_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_stream_get_bool');
  late final _nng_stream_get_bool = _nng_stream_get_boolPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>)>();

  int nng_stream_get_int(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_stream_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_stream_get_int');
  late final _nng_stream_get_int = _nng_stream_get_intPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int nng_stream_get_ms(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_stream_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_stream_get_ms');
  late final _nng_stream_get_ms = _nng_stream_get_msPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<nng_duration>)>();

  int nng_stream_get_size(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_stream_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_stream_get_size');
  late final _nng_stream_get_size = _nng_stream_get_sizePtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>)>();

  int nng_stream_get_uint64(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_stream_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_stream_get_uint64');
  late final _nng_stream_get_uint64 = _nng_stream_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint64>)>();

  int nng_stream_get_string(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_stream_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_stream_get_string');
  late final _nng_stream_get_string = _nng_stream_get_stringPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_stream_get_ptr(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_stream_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_stream_get_ptr');
  late final _nng_stream_get_ptr = _nng_stream_get_ptrPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_stream_get_addr(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_get_addr');
  late final _nng_stream_get_addr = _nng_stream_get_addrPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<nng_sockaddr>)>();

  int nng_stream_set(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_stream_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_stream_set');
  late final _nng_stream_set = _nng_stream_setPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int nng_stream_set_bool(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_stream_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_stream_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_stream_set_bool');
  late final _nng_stream_set_bool = _nng_stream_set_boolPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_set_int(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_stream_set_int');
  late final _nng_stream_set_int = _nng_stream_set_intPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_set_ms(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_stream_set_ms');
  late final _nng_stream_set_ms = _nng_stream_set_msPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_set_size(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_stream_set_size');
  late final _nng_stream_set_size = _nng_stream_set_sizePtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_set_uint64(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_stream_set_uint64');
  late final _nng_stream_set_uint64 = _nng_stream_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_set_string(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_stream_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_stream_set_string');
  late final _nng_stream_set_string = _nng_stream_set_stringPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int nng_stream_set_ptr(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_stream_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_stream_set_ptr');
  late final _nng_stream_set_ptr = _nng_stream_set_ptrPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int nng_stream_set_addr(
    ffi.Pointer<nng_stream> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_set_addr');
  late final _nng_stream_set_addr = _nng_stream_set_addrPtr.asFunction<
      int Function(ffi.Pointer<nng_stream>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<nng_sockaddr>)>();

  int nng_stream_dialer_alloc(
    ffi.Pointer<ffi.Pointer<nng_stream_dialer>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _nng_stream_dialer_alloc(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_dialer_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_stream_dialer>>,
              ffi.Pointer<ffi.Char>)>>('nng_stream_dialer_alloc');
  late final _nng_stream_dialer_alloc = _nng_stream_dialer_allocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<nng_stream_dialer>>,
          ffi.Pointer<ffi.Char>)>();

  int nng_stream_dialer_alloc_url(
    ffi.Pointer<ffi.Pointer<nng_stream_dialer>> arg0,
    ffi.Pointer<nng_url> arg1,
  ) {
    return _nng_stream_dialer_alloc_url(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_dialer_alloc_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_stream_dialer>>,
              ffi.Pointer<nng_url>)>>('nng_stream_dialer_alloc_url');
  late final _nng_stream_dialer_alloc_url =
      _nng_stream_dialer_alloc_urlPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<nng_stream_dialer>>,
              ffi.Pointer<nng_url>)>();

  void nng_stream_dialer_free(
    ffi.Pointer<nng_stream_dialer> arg0,
  ) {
    return _nng_stream_dialer_free(
      arg0,
    );
  }

  late final _nng_stream_dialer_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_stream_dialer>)>>('nng_stream_dialer_free');
  late final _nng_stream_dialer_free = _nng_stream_dialer_freePtr
      .asFunction<void Function(ffi.Pointer<nng_stream_dialer>)>();

  void nng_stream_dialer_close(
    ffi.Pointer<nng_stream_dialer> arg0,
  ) {
    return _nng_stream_dialer_close(
      arg0,
    );
  }

  late final _nng_stream_dialer_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_stream_dialer>)>>('nng_stream_dialer_close');
  late final _nng_stream_dialer_close = _nng_stream_dialer_closePtr
      .asFunction<void Function(ffi.Pointer<nng_stream_dialer>)>();

  void nng_stream_dialer_dial(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_stream_dialer_dial(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_dialer_dialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<nng_aio>)>>('nng_stream_dialer_dial');
  late final _nng_stream_dialer_dial = _nng_stream_dialer_dialPtr.asFunction<
      void Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<nng_aio>)>();

  int nng_stream_dialer_set(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_stream_dialer_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_dialer_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_stream_dialer_set');
  late final _nng_stream_dialer_set = _nng_stream_dialer_setPtr.asFunction<
      int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int nng_stream_dialer_get(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_stream_dialer_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_dialer_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_stream_dialer_get');
  late final _nng_stream_dialer_get = _nng_stream_dialer_getPtr.asFunction<
      int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int nng_stream_dialer_get_bool(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_stream_dialer_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_stream_dialer_get_bool');
  late final _nng_stream_dialer_get_bool =
      _nng_stream_dialer_get_boolPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>();

  int nng_stream_dialer_get_int(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_stream_dialer_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_stream_dialer_get_int');
  late final _nng_stream_dialer_get_int =
      _nng_stream_dialer_get_intPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int nng_stream_dialer_get_ms(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_stream_dialer_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_stream_dialer_get_ms');
  late final _nng_stream_dialer_get_ms =
      _nng_stream_dialer_get_msPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>();

  int nng_stream_dialer_get_size(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_stream_dialer_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_stream_dialer_get_size');
  late final _nng_stream_dialer_get_size =
      _nng_stream_dialer_get_sizePtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>();

  int nng_stream_dialer_get_uint64(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_stream_dialer_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_stream_dialer_get_uint64');
  late final _nng_stream_dialer_get_uint64 =
      _nng_stream_dialer_get_uint64Ptr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>();

  int nng_stream_dialer_get_string(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_stream_dialer_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nng_stream_dialer>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'nng_stream_dialer_get_string');
  late final _nng_stream_dialer_get_string =
      _nng_stream_dialer_get_stringPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_stream_dialer_get_ptr(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_stream_dialer_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_ptrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nng_stream_dialer>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'nng_stream_dialer_get_ptr');
  late final _nng_stream_dialer_get_ptr =
      _nng_stream_dialer_get_ptrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_stream_dialer_get_addr(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_dialer_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_dialer_get_addr');
  late final _nng_stream_dialer_get_addr =
      _nng_stream_dialer_get_addrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>();

  int nng_stream_dialer_set_bool(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_stream_dialer_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_stream_dialer_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>, ffi.Uint8)>>('nng_stream_dialer_set_bool');
  late final _nng_stream_dialer_set_bool =
      _nng_stream_dialer_set_boolPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_dialer_set_int(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_dialer_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('nng_stream_dialer_set_int');
  late final _nng_stream_dialer_set_int =
      _nng_stream_dialer_set_intPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_dialer_set_ms(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_dialer_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_stream_dialer_set_ms');
  late final _nng_stream_dialer_set_ms =
      _nng_stream_dialer_set_msPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_dialer_set_size(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_dialer_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('nng_stream_dialer_set_size');
  late final _nng_stream_dialer_set_size =
      _nng_stream_dialer_set_sizePtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_dialer_set_uint64(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_dialer_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_stream_dialer_set_uint64');
  late final _nng_stream_dialer_set_uint64 =
      _nng_stream_dialer_set_uint64Ptr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_dialer_set_string(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_stream_dialer_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_stream_dialer_set_string');
  late final _nng_stream_dialer_set_string =
      _nng_stream_dialer_set_stringPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int nng_stream_dialer_set_ptr(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_stream_dialer_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_stream_dialer_set_ptr');
  late final _nng_stream_dialer_set_ptr =
      _nng_stream_dialer_set_ptrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int nng_stream_dialer_set_addr(
    ffi.Pointer<nng_stream_dialer> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_dialer_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_dialer_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_dialer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_dialer_set_addr');
  late final _nng_stream_dialer_set_addr =
      _nng_stream_dialer_set_addrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_dialer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>();

  int nng_stream_listener_alloc(
    ffi.Pointer<ffi.Pointer<nng_stream_listener>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _nng_stream_listener_alloc(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_listener_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_stream_listener>>,
              ffi.Pointer<ffi.Char>)>>('nng_stream_listener_alloc');
  late final _nng_stream_listener_alloc =
      _nng_stream_listener_allocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<nng_stream_listener>>,
              ffi.Pointer<ffi.Char>)>();

  int nng_stream_listener_alloc_url(
    ffi.Pointer<ffi.Pointer<nng_stream_listener>> arg0,
    ffi.Pointer<nng_url> arg1,
  ) {
    return _nng_stream_listener_alloc_url(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_listener_alloc_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<nng_stream_listener>>,
              ffi.Pointer<nng_url>)>>('nng_stream_listener_alloc_url');
  late final _nng_stream_listener_alloc_url =
      _nng_stream_listener_alloc_urlPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<nng_stream_listener>>,
              ffi.Pointer<nng_url>)>();

  void nng_stream_listener_free(
    ffi.Pointer<nng_stream_listener> arg0,
  ) {
    return _nng_stream_listener_free(
      arg0,
    );
  }

  late final _nng_stream_listener_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_stream_listener>)>>('nng_stream_listener_free');
  late final _nng_stream_listener_free = _nng_stream_listener_freePtr
      .asFunction<void Function(ffi.Pointer<nng_stream_listener>)>();

  void nng_stream_listener_close(
    ffi.Pointer<nng_stream_listener> arg0,
  ) {
    return _nng_stream_listener_close(
      arg0,
    );
  }

  late final _nng_stream_listener_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nng_stream_listener>)>>('nng_stream_listener_close');
  late final _nng_stream_listener_close = _nng_stream_listener_closePtr
      .asFunction<void Function(ffi.Pointer<nng_stream_listener>)>();

  int nng_stream_listener_listen(
    ffi.Pointer<nng_stream_listener> arg0,
  ) {
    return _nng_stream_listener_listen(
      arg0,
    );
  }

  late final _nng_stream_listener_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>)>>('nng_stream_listener_listen');
  late final _nng_stream_listener_listen = _nng_stream_listener_listenPtr
      .asFunction<int Function(ffi.Pointer<nng_stream_listener>)>();

  void nng_stream_listener_accept(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<nng_aio> arg1,
  ) {
    return _nng_stream_listener_accept(
      arg0,
      arg1,
    );
  }

  late final _nng_stream_listener_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<nng_aio>)>>('nng_stream_listener_accept');
  late final _nng_stream_listener_accept =
      _nng_stream_listener_acceptPtr.asFunction<
          void Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<nng_aio>)>();

  int nng_stream_listener_set(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_stream_listener_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_listener_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('nng_stream_listener_set');
  late final _nng_stream_listener_set = _nng_stream_listener_setPtr.asFunction<
      int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int nng_stream_listener_get(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_stream_listener_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_stream_listener_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_stream_listener_get');
  late final _nng_stream_listener_get = _nng_stream_listener_getPtr.asFunction<
      int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int nng_stream_listener_get_bool(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_stream_listener_get_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_stream_listener_get_bool');
  late final _nng_stream_listener_get_bool =
      _nng_stream_listener_get_boolPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>();

  int nng_stream_listener_get_int(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_stream_listener_get_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_stream_listener_get_int');
  late final _nng_stream_listener_get_int =
      _nng_stream_listener_get_intPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int nng_stream_listener_get_ms(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_stream_listener_get_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_stream_listener_get_ms');
  late final _nng_stream_listener_get_ms =
      _nng_stream_listener_get_msPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>();

  int nng_stream_listener_get_size(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_stream_listener_get_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_stream_listener_get_size');
  late final _nng_stream_listener_get_size =
      _nng_stream_listener_get_sizePtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>();

  int nng_stream_listener_get_uint64(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_stream_listener_get_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_stream_listener_get_uint64');
  late final _nng_stream_listener_get_uint64 =
      _nng_stream_listener_get_uint64Ptr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>();

  int nng_stream_listener_get_string(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_stream_listener_get_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nng_stream_listener>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'nng_stream_listener_get_string');
  late final _nng_stream_listener_get_string =
      _nng_stream_listener_get_stringPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_stream_listener_get_ptr(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_stream_listener_get_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_ptrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nng_stream_listener>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'nng_stream_listener_get_ptr');
  late final _nng_stream_listener_get_ptr =
      _nng_stream_listener_get_ptrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_stream_listener_get_addr(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_listener_get_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_listener_get_addr');
  late final _nng_stream_listener_get_addr =
      _nng_stream_listener_get_addrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>();

  int nng_stream_listener_set_bool(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_stream_listener_set_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_stream_listener_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_stream_listener_set_bool');
  late final _nng_stream_listener_set_bool =
      _nng_stream_listener_set_boolPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_listener_set_int(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_listener_set_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('nng_stream_listener_set_int');
  late final _nng_stream_listener_set_int =
      _nng_stream_listener_set_intPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_listener_set_ms(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_listener_set_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_stream_listener_set_ms');
  late final _nng_stream_listener_set_ms =
      _nng_stream_listener_set_msPtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_listener_set_size(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_listener_set_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_stream_listener_set_size');
  late final _nng_stream_listener_set_size =
      _nng_stream_listener_set_sizePtr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_listener_set_uint64(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_stream_listener_set_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_stream_listener_set_uint64');
  late final _nng_stream_listener_set_uint64 =
      _nng_stream_listener_set_uint64Ptr.asFunction<
          int Function(
              ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>, int)>();

  int nng_stream_listener_set_string(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_stream_listener_set_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_stream_listener_set_string');
  late final _nng_stream_listener_set_string =
      _nng_stream_listener_set_stringPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int nng_stream_listener_set_ptr(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_stream_listener_set_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_stream_listener_set_ptr');
  late final _nng_stream_listener_set_ptr =
      _nng_stream_listener_set_ptrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int nng_stream_listener_set_addr(
    ffi.Pointer<nng_stream_listener> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_stream_listener_set_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_stream_listener_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nng_stream_listener>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_stream_listener_set_addr');
  late final _nng_stream_listener_set_addr =
      _nng_stream_listener_set_addrPtr.asFunction<
          int Function(ffi.Pointer<nng_stream_listener>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>();

  int nng_msg_getopt(
    ffi.Pointer<nng_msg> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_msg_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_msg_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nng_msg>, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_msg_getopt');
  late final _nng_msg_getopt = _nng_msg_getoptPtr.asFunction<
      int Function(ffi.Pointer<nng_msg>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_getopt(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_getopt');
  late final _nng_getopt = _nng_getoptPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_getopt_bool(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_getopt_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_getopt_bool');
  late final _nng_getopt_bool = _nng_getopt_boolPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_getopt_int(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_getopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_getopt_int');
  late final _nng_getopt_int = _nng_getopt_intPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_getopt_ms(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_getopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_getopt_ms');
  late final _nng_getopt_ms = _nng_getopt_msPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_getopt_size(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_getopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_getopt_size');
  late final _nng_getopt_size = _nng_getopt_sizePtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_getopt_uint64(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_getopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_getopt_uint64');
  late final _nng_getopt_uint64 = _nng_getopt_uint64Ptr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_getopt_ptr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_getopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_getopt_ptr');
  late final _nng_getopt_ptr = _nng_getopt_ptrPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_getopt_string(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_getopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_getopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_getopt_string');
  late final _nng_getopt_string = _nng_getopt_stringPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_setopt(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_setopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_setopt');
  late final _nng_setopt = _nng_setoptPtr.asFunction<
      int Function(
          nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_setopt_bool(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_setopt_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_setopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_setopt_bool');
  late final _nng_setopt_bool = _nng_setopt_boolPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_setopt_int(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_setopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_socket, ffi.Pointer<ffi.Char>, ffi.Int)>>('nng_setopt_int');
  late final _nng_setopt_int = _nng_setopt_intPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_setopt_ms(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_setopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_setopt_ms');
  late final _nng_setopt_ms = _nng_setopt_msPtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_setopt_size(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_setopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_socket, ffi.Pointer<ffi.Char>, ffi.Size)>>('nng_setopt_size');
  late final _nng_setopt_size = _nng_setopt_sizePtr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_setopt_uint64(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_setopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_setopt_uint64');
  late final _nng_setopt_uint64 = _nng_setopt_uint64Ptr
      .asFunction<int Function(nng_socket, ffi.Pointer<ffi.Char>, int)>();

  int nng_setopt_string(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_setopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_setopt_string');
  late final _nng_setopt_string = _nng_setopt_stringPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_setopt_ptr(
    nng_socket arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_setopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_setopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_socket, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_setopt_ptr');
  late final _nng_setopt_ptr = _nng_setopt_ptrPtr.asFunction<
      int Function(nng_socket, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_ctx_getopt(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_ctx_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_ctx_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('nng_ctx_getopt');
  late final _nng_ctx_getopt = _nng_ctx_getoptPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_ctx_getopt_bool(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_ctx_getopt_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_getopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_ctx_getopt_bool');
  late final _nng_ctx_getopt_bool = _nng_ctx_getopt_boolPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_ctx_getopt_int(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_ctx_getopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_getopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_ctx_getopt_int');
  late final _nng_ctx_getopt_int = _nng_ctx_getopt_intPtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_ctx_getopt_ms(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_ctx_getopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_getopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_ctx_getopt_ms');
  late final _nng_ctx_getopt_ms = _nng_ctx_getopt_msPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_ctx_getopt_size(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_ctx_getopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_getopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_ctx_getopt_size');
  late final _nng_ctx_getopt_size = _nng_ctx_getopt_sizePtr.asFunction<
      int Function(nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_ctx_setopt(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_ctx_setopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_ctx_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_ctx_setopt');
  late final _nng_ctx_setopt = _nng_ctx_setoptPtr.asFunction<
      int Function(
          nng_ctx, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_ctx_setopt_bool(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_ctx_setopt_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_ctx_setopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_ctx_setopt_bool');
  late final _nng_ctx_setopt_bool = _nng_ctx_setopt_boolPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_setopt_int(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_setopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_setopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_ctx, ffi.Pointer<ffi.Char>, ffi.Int)>>('nng_ctx_setopt_int');
  late final _nng_ctx_setopt_int = _nng_ctx_setopt_intPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_setopt_ms(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_setopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_setopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_ctx_setopt_ms');
  late final _nng_ctx_setopt_ms = _nng_ctx_setopt_msPtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_ctx_setopt_size(
    nng_ctx arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_ctx_setopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_ctx_setopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_ctx, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_ctx_setopt_size');
  late final _nng_ctx_setopt_size = _nng_ctx_setopt_sizePtr
      .asFunction<int Function(nng_ctx, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_getopt(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_dialer_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_dialer_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_dialer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_dialer_getopt');
  late final _nng_dialer_getopt = _nng_dialer_getoptPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_dialer_getopt_bool(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_dialer_getopt_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_dialer_getopt_bool');
  late final _nng_dialer_getopt_bool = _nng_dialer_getopt_boolPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_dialer_getopt_int(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_dialer_getopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_dialer_getopt_int');
  late final _nng_dialer_getopt_int = _nng_dialer_getopt_intPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_dialer_getopt_ms(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_dialer_getopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_dialer_getopt_ms');
  late final _nng_dialer_getopt_ms = _nng_dialer_getopt_msPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_dialer_getopt_size(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_dialer_getopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_dialer_getopt_size');
  late final _nng_dialer_getopt_size = _nng_dialer_getopt_sizePtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_dialer_getopt_sockaddr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_dialer_getopt_sockaddr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_sockaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_dialer_getopt_sockaddr');
  late final _nng_dialer_getopt_sockaddr =
      _nng_dialer_getopt_sockaddrPtr.asFunction<
          int Function(
              nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_dialer_getopt_uint64(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_dialer_getopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_dialer_getopt_uint64');
  late final _nng_dialer_getopt_uint64 =
      _nng_dialer_getopt_uint64Ptr.asFunction<
          int Function(
              nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_dialer_getopt_ptr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_dialer_getopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_dialer_getopt_ptr');
  late final _nng_dialer_getopt_ptr = _nng_dialer_getopt_ptrPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_dialer_getopt_string(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_dialer_getopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_getopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_dialer_getopt_string');
  late final _nng_dialer_getopt_string =
      _nng_dialer_getopt_stringPtr.asFunction<
          int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_dialer_setopt(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_dialer_setopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_dialer_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_dialer_setopt');
  late final _nng_dialer_setopt = _nng_dialer_setoptPtr.asFunction<
      int Function(
          nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_dialer_setopt_bool(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_dialer_setopt_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_dialer_setopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_dialer_setopt_bool');
  late final _nng_dialer_setopt_bool = _nng_dialer_setopt_boolPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_setopt_int(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_setopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_dialer_setopt_int');
  late final _nng_dialer_setopt_int = _nng_dialer_setopt_intPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_setopt_ms(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_setopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_dialer_setopt_ms');
  late final _nng_dialer_setopt_ms = _nng_dialer_setopt_msPtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_setopt_size(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_setopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_dialer_setopt_size');
  late final _nng_dialer_setopt_size = _nng_dialer_setopt_sizePtr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_setopt_uint64(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_dialer_setopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_dialer_setopt_uint64');
  late final _nng_dialer_setopt_uint64 = _nng_dialer_setopt_uint64Ptr
      .asFunction<int Function(nng_dialer, ffi.Pointer<ffi.Char>, int)>();

  int nng_dialer_setopt_ptr(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_dialer_setopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_dialer_setopt_ptr');
  late final _nng_dialer_setopt_ptr = _nng_dialer_setopt_ptrPtr.asFunction<
      int Function(nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_dialer_setopt_string(
    nng_dialer arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_dialer_setopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_dialer_setopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_dialer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_dialer_setopt_string');
  late final _nng_dialer_setopt_string =
      _nng_dialer_setopt_stringPtr.asFunction<
          int Function(
              nng_dialer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_listener_getopt(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_listener_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_listener_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_listener,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_listener_getopt');
  late final _nng_listener_getopt = _nng_listener_getoptPtr.asFunction<
      int Function(nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_listener_getopt_bool(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_listener_getopt_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_listener_getopt_bool');
  late final _nng_listener_getopt_bool =
      _nng_listener_getopt_boolPtr.asFunction<
          int Function(
              nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_listener_getopt_int(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_listener_getopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_listener_getopt_int');
  late final _nng_listener_getopt_int = _nng_listener_getopt_intPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_listener_getopt_ms(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_listener_getopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_listener_getopt_ms');
  late final _nng_listener_getopt_ms = _nng_listener_getopt_msPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_listener_getopt_size(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_listener_getopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_listener_getopt_size');
  late final _nng_listener_getopt_size =
      _nng_listener_getopt_sizePtr.asFunction<
          int Function(
              nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_listener_getopt_sockaddr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_listener_getopt_sockaddr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_sockaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_listener_getopt_sockaddr');
  late final _nng_listener_getopt_sockaddr =
      _nng_listener_getopt_sockaddrPtr.asFunction<
          int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>();

  int nng_listener_getopt_uint64(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_listener_getopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_listener_getopt_uint64');
  late final _nng_listener_getopt_uint64 =
      _nng_listener_getopt_uint64Ptr.asFunction<
          int Function(
              nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_listener_getopt_ptr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_listener_getopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_listener_getopt_ptr');
  late final _nng_listener_getopt_ptr = _nng_listener_getopt_ptrPtr.asFunction<
      int Function(nng_listener, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_listener_getopt_string(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_listener_getopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_getopt_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'nng_listener_getopt_string');
  late final _nng_listener_getopt_string =
      _nng_listener_getopt_stringPtr.asFunction<
          int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int nng_listener_setopt(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _nng_listener_setopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_listener_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('nng_listener_setopt');
  late final _nng_listener_setopt = _nng_listener_setoptPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int nng_listener_setopt_bool(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    bool arg2,
  ) {
    return _nng_listener_setopt_bool(
      arg0,
      arg1,
      arg2 ? 1 : 0,
    );
  }

  late final _nng_listener_setopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('nng_listener_setopt_bool');
  late final _nng_listener_setopt_bool = _nng_listener_setopt_boolPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_setopt_int(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_setopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('nng_listener_setopt_int');
  late final _nng_listener_setopt_int = _nng_listener_setopt_intPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_setopt_ms(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_setopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              nng_duration)>>('nng_listener_setopt_ms');
  late final _nng_listener_setopt_ms = _nng_listener_setopt_msPtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_setopt_size(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_setopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nng_listener_setopt_size');
  late final _nng_listener_setopt_size = _nng_listener_setopt_sizePtr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_setopt_uint64(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _nng_listener_setopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('nng_listener_setopt_uint64');
  late final _nng_listener_setopt_uint64 = _nng_listener_setopt_uint64Ptr
      .asFunction<int Function(nng_listener, ffi.Pointer<ffi.Char>, int)>();

  int nng_listener_setopt_ptr(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _nng_listener_setopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('nng_listener_setopt_ptr');
  late final _nng_listener_setopt_ptr = _nng_listener_setopt_ptrPtr.asFunction<
      int Function(
          nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int nng_listener_setopt_string(
    nng_listener arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _nng_listener_setopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_listener_setopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_listener, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nng_listener_setopt_string');
  late final _nng_listener_setopt_string =
      _nng_listener_setopt_stringPtr.asFunction<
          int Function(
              nng_listener, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nng_pipe_getopt(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Size> arg3,
  ) {
    return _nng_pipe_getopt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _nng_pipe_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              nng_pipe,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('nng_pipe_getopt');
  late final _nng_pipe_getopt = _nng_pipe_getoptPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int nng_pipe_getopt_bool(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _nng_pipe_getopt_bool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('nng_pipe_getopt_bool');
  late final _nng_pipe_getopt_bool = _nng_pipe_getopt_boolPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int nng_pipe_getopt_int(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _nng_pipe_getopt_int(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('nng_pipe_getopt_int');
  late final _nng_pipe_getopt_int = _nng_pipe_getopt_intPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int nng_pipe_getopt_ms(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_duration> arg2,
  ) {
    return _nng_pipe_getopt_ms(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_duration>)>>('nng_pipe_getopt_ms');
  late final _nng_pipe_getopt_ms = _nng_pipe_getopt_msPtr.asFunction<
      int Function(
          nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_duration>)>();

  int nng_pipe_getopt_size(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _nng_pipe_getopt_size(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('nng_pipe_getopt_size');
  late final _nng_pipe_getopt_size = _nng_pipe_getopt_sizePtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int nng_pipe_getopt_sockaddr(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<nng_sockaddr> arg2,
  ) {
    return _nng_pipe_getopt_sockaddr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_sockaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<nng_sockaddr>)>>('nng_pipe_getopt_sockaddr');
  late final _nng_pipe_getopt_sockaddr =
      _nng_pipe_getopt_sockaddrPtr.asFunction<
          int Function(
              nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<nng_sockaddr>)>();

  int nng_pipe_getopt_uint64(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _nng_pipe_getopt_uint64(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('nng_pipe_getopt_uint64');
  late final _nng_pipe_getopt_uint64 = _nng_pipe_getopt_uint64Ptr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int nng_pipe_getopt_ptr(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
  ) {
    return _nng_pipe_getopt_ptr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('nng_pipe_getopt_ptr');
  late final _nng_pipe_getopt_ptr = _nng_pipe_getopt_ptrPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int nng_pipe_getopt_string(
    nng_pipe arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _nng_pipe_getopt_string(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _nng_pipe_getopt_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(nng_pipe, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('nng_pipe_getopt_string');
  late final _nng_pipe_getopt_string = _nng_pipe_getopt_stringPtr.asFunction<
      int Function(nng_pipe, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void nng_closeall() {
    return _nng_closeall();
  }

  late final _nng_closeallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('nng_closeall');
  late final _nng_closeall = _nng_closeallPtr.asFunction<void Function()>();

  int nng_pub0_open(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_pub0_open(
      arg0,
    );
  }

  late final _nng_pub0_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_pub0_open');
  late final _nng_pub0_open =
      _nng_pub0_openPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_pub0_open_raw(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_pub0_open_raw(
      arg0,
    );
  }

  late final _nng_pub0_open_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_pub0_open_raw');
  late final _nng_pub0_open_raw =
      _nng_pub0_open_rawPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_sub0_open(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_sub0_open(
      arg0,
    );
  }

  late final _nng_sub0_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_sub0_open');
  late final _nng_sub0_open =
      _nng_sub0_openPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_sub0_open_raw(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_sub0_open_raw(
      arg0,
    );
  }

  late final _nng_sub0_open_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_sub0_open_raw');
  late final _nng_sub0_open_raw =
      _nng_sub0_open_rawPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_rep0_open(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_rep0_open(
      arg0,
    );
  }

  late final _nng_rep0_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_rep0_open');
  late final _nng_rep0_open =
      _nng_rep0_openPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_rep0_open_raw(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_rep0_open_raw(
      arg0,
    );
  }

  late final _nng_rep0_open_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_rep0_open_raw');
  late final _nng_rep0_open_raw =
      _nng_rep0_open_rawPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_req0_open(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_req0_open(
      arg0,
    );
  }

  late final _nng_req0_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_req0_open');
  late final _nng_req0_open =
      _nng_req0_openPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  int nng_req0_open_raw(
    ffi.Pointer<nng_socket> arg0,
  ) {
    return _nng_req0_open_raw(
      arg0,
    );
  }

  late final _nng_req0_open_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>(
          'nng_req0_open_raw');
  late final _nng_req0_open_raw =
      _nng_req0_open_rawPtr.asFunction<int Function(ffi.Pointer<nng_socket>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final nng _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nng_socket>)>>
      get nng_close_ptr => _library._nng_close_ptrPtr;
}

class max_align_t extends ffi.Opaque {}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class nng_ctx_s extends ffi.Struct {
  @ffi.Uint32()
  external int id;
}

class nng_dialer_s extends ffi.Struct {
  @ffi.Uint32()
  external int id;
}

class nng_listener_s extends ffi.Struct {
  @ffi.Uint32()
  external int id;
}

class nng_pipe_s extends ffi.Struct {
  @ffi.Uint32()
  external int id;
}

class nng_socket_s extends ffi.Struct {
  @ffi.Uint32()
  external int id;
}

class nng_msg extends ffi.Opaque {}

class nng_stat extends ffi.Opaque {}

class nng_aio extends ffi.Opaque {}

class nng_sockaddr_inproc extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> sa_name;
}

class nng_sockaddr_path extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> sa_path;
}

class nng_sockaddr_in6 extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Uint16()
  external int sa_port;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> sa_addr;

  @ffi.Uint32()
  external int sa_scope;
}

class nng_sockaddr_in extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Uint16()
  external int sa_port;

  @ffi.Uint32()
  external int sa_addr;
}

class nng_sockaddr_zt extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Uint64()
  external int sa_nwid;

  @ffi.Uint64()
  external int sa_nodeid;

  @ffi.Uint32()
  external int sa_port;
}

class nng_sockaddr_abstract extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Uint16()
  external int sa_len;

  @ffi.Array.multi([107])
  external ffi.Array<ffi.Uint8> sa_name;
}

class nng_sockaddr_storage extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> sa_pad;
}

class nng_sockaddr extends ffi.Union {
  @ffi.Uint16()
  external int s_family;

  external nng_sockaddr_ipc s_ipc;

  external nng_sockaddr_inproc s_inproc;

  external nng_sockaddr_in6 s_in6;

  external nng_sockaddr_in s_in;

  external nng_sockaddr_zt s_zt;

  external nng_sockaddr_abstract s_abstract;

  external nng_sockaddr_storage s_storage;
}

typedef nng_sockaddr_ipc = nng_sockaddr_path;

abstract class nng_sockaddr_family {
  static const int NNG_AF_UNSPEC = 0;
  static const int NNG_AF_INPROC = 1;
  static const int NNG_AF_IPC = 2;
  static const int NNG_AF_INET = 3;
  static const int NNG_AF_INET6 = 4;
  static const int NNG_AF_ZT = 5;
  static const int NNG_AF_ABSTRACT = 6;
}

class nng_iov extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_buf;

  @ffi.Size()
  external int iov_len;
}

typedef nng_socket = nng_socket_s;
typedef nng_duration = ffi.Int32;

abstract class nng_pipe_ev {
  static const int NNG_PIPE_EV_ADD_PRE = 0;
  static const int NNG_PIPE_EV_ADD_POST = 1;
  static const int NNG_PIPE_EV_REM_POST = 2;
  static const int NNG_PIPE_EV_NUM = 3;
}

typedef nng_pipe_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(nng_pipe, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef nng_pipe = nng_pipe_s;
typedef nng_listener = nng_listener_s;
typedef nng_dialer = nng_dialer_s;
typedef nng_ctx = nng_ctx_s;
typedef nng_aio_cancelfn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<nng_aio>, ffi.Pointer<ffi.Void>, ffi.Int)>>;

abstract class nng_stat_type_enum {
  static const int NNG_STAT_SCOPE = 0;
  static const int NNG_STAT_LEVEL = 1;
  static const int NNG_STAT_COUNTER = 2;
  static const int NNG_STAT_STRING = 3;
  static const int NNG_STAT_BOOLEAN = 4;
  static const int NNG_STAT_ID = 5;
}

abstract class nng_unit_enum {
  static const int NNG_UNIT_NONE = 0;
  static const int NNG_UNIT_BYTES = 1;
  static const int NNG_UNIT_MESSAGES = 2;
  static const int NNG_UNIT_MILLIS = 3;
  static const int NNG_UNIT_EVENTS = 4;
}

abstract class nng_errno_enum {
  static const int NNG_EINTR = 1;
  static const int NNG_ENOMEM = 2;
  static const int NNG_EINVAL = 3;
  static const int NNG_EBUSY = 4;
  static const int NNG_ETIMEDOUT = 5;
  static const int NNG_ECONNREFUSED = 6;
  static const int NNG_ECLOSED = 7;
  static const int NNG_EAGAIN = 8;
  static const int NNG_ENOTSUP = 9;
  static const int NNG_EADDRINUSE = 10;
  static const int NNG_ESTATE = 11;
  static const int NNG_ENOENT = 12;
  static const int NNG_EPROTO = 13;
  static const int NNG_EUNREACHABLE = 14;
  static const int NNG_EADDRINVAL = 15;
  static const int NNG_EPERM = 16;
  static const int NNG_EMSGSIZE = 17;
  static const int NNG_ECONNABORTED = 18;
  static const int NNG_ECONNRESET = 19;
  static const int NNG_ECANCELED = 20;
  static const int NNG_ENOFILES = 21;
  static const int NNG_ENOSPC = 22;
  static const int NNG_EEXIST = 23;
  static const int NNG_EREADONLY = 24;
  static const int NNG_EWRITEONLY = 25;
  static const int NNG_ECRYPTO = 26;
  static const int NNG_EPEERAUTH = 27;
  static const int NNG_ENOARG = 28;
  static const int NNG_EAMBIGUOUS = 29;
  static const int NNG_EBADTYPE = 30;
  static const int NNG_ECONNSHUT = 31;
  static const int NNG_EINTERNAL = 1000;
  static const int NNG_ESYSERR = 268435456;
  static const int NNG_ETRANERR = 536870912;
}

class nng_url extends ffi.Struct {
  external ffi.Pointer<ffi.Char> u_rawurl;

  external ffi.Pointer<ffi.Char> u_scheme;

  external ffi.Pointer<ffi.Char> u_userinfo;

  external ffi.Pointer<ffi.Char> u_host;

  external ffi.Pointer<ffi.Char> u_hostname;

  external ffi.Pointer<ffi.Char> u_port;

  external ffi.Pointer<ffi.Char> u_path;

  external ffi.Pointer<ffi.Char> u_query;

  external ffi.Pointer<ffi.Char> u_fragment;

  external ffi.Pointer<ffi.Char> u_requri;
}

class nng_stream extends ffi.Opaque {}

class nng_stream_dialer extends ffi.Opaque {}

class nng_stream_listener extends ffi.Opaque {}

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NNG_MAJOR_VERSION = 1;

const int NNG_MINOR_VERSION = 5;

const int NNG_PATCH_VERSION = 2;

const String NNG_RELEASE_SUFFIX = '';

const int NNG_MAXADDRLEN = 128;

const int NNG_DURATION_INFINITE = -1;

const int NNG_DURATION_DEFAULT = -2;

const int NNG_DURATION_ZERO = 0;

const int NNG_FLAG_ALLOC = 1;

const int NNG_FLAG_NONBLOCK = 2;

const String NNG_OPT_SOCKNAME = 'socket-name';

const String NNG_OPT_RAW = 'raw';

const String NNG_OPT_PROTO = 'protocol';

const String NNG_OPT_PROTONAME = 'protocol-name';

const String NNG_OPT_PEER = 'peer';

const String NNG_OPT_PEERNAME = 'peer-name';

const String NNG_OPT_RECVBUF = 'recv-buffer';

const String NNG_OPT_SENDBUF = 'send-buffer';

const String NNG_OPT_RECVFD = 'recv-fd';

const String NNG_OPT_SENDFD = 'send-fd';

const String NNG_OPT_RECVTIMEO = 'recv-timeout';

const String NNG_OPT_SENDTIMEO = 'send-timeout';

const String NNG_OPT_LOCADDR = 'local-address';

const String NNG_OPT_REMADDR = 'remote-address';

const String NNG_OPT_URL = 'url';

const String NNG_OPT_MAXTTL = 'ttl-max';

const String NNG_OPT_RECVMAXSZ = 'recv-size-max';

const String NNG_OPT_RECONNMINT = 'reconnect-time-min';

const String NNG_OPT_RECONNMAXT = 'reconnect-time-max';

const String NNG_OPT_TLS_CONFIG = 'tls-config';

const String NNG_OPT_TLS_AUTH_MODE = 'tls-authmode';

const String NNG_OPT_TLS_CERT_KEY_FILE = 'tls-cert-key-file';

const String NNG_OPT_TLS_CA_FILE = 'tls-ca-file';

const String NNG_OPT_TLS_SERVER_NAME = 'tls-server-name';

const String NNG_OPT_TLS_VERIFIED = 'tls-verified';

const String NNG_OPT_TCP_NODELAY = 'tcp-nodelay';

const String NNG_OPT_TCP_KEEPALIVE = 'tcp-keepalive';

const String NNG_OPT_TCP_BOUND_PORT = 'tcp-bound-port';

const String NNG_OPT_IPC_SECURITY_DESCRIPTOR = 'ipc:security-descriptor';

const String NNG_OPT_IPC_PERMISSIONS = 'ipc:permissions';

const String NNG_OPT_IPC_PEER_UID = 'ipc:peer-uid';

const String NNG_OPT_IPC_PEER_GID = 'ipc:peer-gid';

const String NNG_OPT_IPC_PEER_PID = 'ipc:peer-pid';

const String NNG_OPT_IPC_PEER_ZONEID = 'ipc:peer-zoneid';

const String NNG_OPT_WS_REQUEST_HEADERS = 'ws:request-headers';

const String NNG_OPT_WS_RESPONSE_HEADERS = 'ws:response-headers';

const String NNG_OPT_WS_RESPONSE_HEADER = 'ws:response-header:';

const String NNG_OPT_WS_REQUEST_HEADER = 'ws:request-header:';

const String NNG_OPT_WS_REQUEST_URI = 'ws:request-uri';

const String NNG_OPT_WS_SENDMAXFRAME = 'ws:txframe-max';

const String NNG_OPT_WS_RECVMAXFRAME = 'ws:rxframe-max';

const String NNG_OPT_WS_PROTOCOL = 'ws:protocol';

const String NNG_OPT_WS_SEND_TEXT = 'ws:send-text';

const String NNG_OPT_WS_RECV_TEXT = 'ws:recv-text';

const String NNG_OPT_SUB_SUBSCRIBE = 'sub:subscribe';

const String NNG_OPT_SUB_UNSUBSCRIBE = 'sub:unsubscribe';

const String NNG_OPT_SUB_PREFNEW = 'sub:prefnew';

const int NNG_REP0_SELF = 49;

const int NNG_REP0_PEER = 48;

const String NNG_REP0_SELF_NAME = 'rep';

const String NNG_REP0_PEER_NAME = 'req';

const int NNG_REQ0_SELF = 48;

const int NNG_REQ0_PEER = 49;

const String NNG_REQ0_SELF_NAME = 'req';

const String NNG_REQ0_PEER_NAME = 'rep';

const String NNG_OPT_REQ_RESENDTIME = 'req:resend-time';
